###################################################################################################################
#  Copyright 2019 Goldman Sachs.
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an
#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
#  specific language governing permissions and limitations
#  under the License.
##################################################################################################################

schema
{
    query: Query
    mutation: Mutation
}

type AggregateList
{
    headers: [String]!
    rows: [AggregateData]!
}

type AggregateData
{
    groupbys: [String]!
    values: [Int]!
}

input StringAttribute
{
    eq:            String
    notEq:         String
    in:            [String]
    contains:      String
    notContains:   String
    endsWith:      String
    startsWith:    String
    notStartsWith: String
    notEndsWith:   String
    eqWithTrim:    String
    greaterThan:   String
    greaterThanEquals: String
    lessThan:      String
    lessThanEquals: String

    #################################################################################################################
    # Wild cards can include * and ?, which mean 'zero or many' and 'exactly one' character respectively.
    # A wild card can be escaped using single-quote. A single-quote must be escaped with another single quote
    # Examples:
    # "a?b*" matches "acbdefg" and "agb", but not "ab"
    # "a'*" matches "a*" (a followed with the star character)
    # "a''*" matches "a'" and "a'bced" (the two quotes are an escaped single-quote)
    # "a'''*" matches "a'*" (a followed by single-quote and then the star character)
    #
    # A single quote that is not followed by ',?, or * is ignored, so the pattern "a'b" is the same as "ab", which matches just "ab"
    #
    wildCardEq: String
    wildCardNotEq: String
    substring: SubstringParams
}

type FloatAggregate {
    value: Float # The actual value of the column
    sum: Float
    max: Float
    min: Float
    mean: Float
    count: Float
    standardDeviationSample: Float
    standardDeviationPopulation: Float
    varianceSample: Float
    variancePopulation: Float
}

type IntAggregate {
    value: Int # The actual value of the column
    sum: Int
    max: Int
    min: Int
    mean: Int
    count: Int
    standardDeviationSample: Int
    standardDeviationPopulation: Int
    varianceSample: Int
    variancePopulation: Int
}

input CharAttribute
{
    eq: String
    notEq: String
    greaterThan: String
    greaterThanEquals: String
    lessThan: String
    lessThanEquals: String
    in: [String]
    notIn: [String]
}

input IntegerAttribute
{
    eq: Int
    notEq: Int
    in: [Int]
    notIn: [Int]
    greaterThan: Int
    greaterThanEquals: Int
    lessThan: Int
    lessThanEquals: Int
}

input FloatAttribute
{
    eq: Float
    notEq: Float
    in: [Float]
    notIn: [Float]
    greaterThan: Float
    greaterThanEquals: Float
    lessThan: Float
    lessThanEquals: Float
}

input BooleanAttribute
{
    eq: Boolean
    notEq: Boolean
}

input SubstringParams
{
    start: Int
    end: Int
}

input TimestampAttribute
{
    eq: Timestamp
    notEq: Timestamp
    greaterThan: Timestamp
    greaterThanEquals: Timestamp
    lessThan: Timestamp
    lessThanEquals: Timestamp
    in: [Timestamp]
    notIn: [Timestamp]
}

input DateAttribute
{
    eq: Date
    notEq: Date
    greaterThan: Date
    greaterThanEquals: Date
    lessThan: Date
    lessThanEquals: Date
    in: [Date]
    notIn: [Date]
}

input AsOfAttribute
{
    eq: Timestamp
    equalsEdgePoint: Timestamp
}

enum AcsDesc
{
    asc
    desc
}

# Timestamp in RFC-3339 compliant format (i.e. "2019-10-13T04:04:39+00:00")
scalar Timestamp
scalar DateTime
scalar Date
scalar Url

