/*
 Copyright 2016 Goldman Sachs.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
 */

package com.gs.fw.common.mithra.connectionmanager;


import java.sql.*;

public class DelegatingStatement implements Statement
{
    private Statement delegate;
    private boolean closed;

    public DelegatingStatement(Statement delegate)
    {
        this.delegate = delegate;
    }

    protected Statement getDelegate()
    {
        return delegate;
    }

    public void addBatch(String sql) throws SQLException
    {
        delegate.addBatch(sql);
    }

    public void cancel() throws SQLException
    {
        delegate.cancel();
    }

    public void clearBatch() throws SQLException
    {
        delegate.clearBatch();
    }

    public void clearWarnings() throws SQLException
    {
        delegate.clearWarnings();
    }

    public void close() throws SQLException
    {
        if (!closed) // cater for bad drivers that throw exceptions when close is called multiple times.
        {
            this.closed = true;
            delegate.close();
        }
    }

    public boolean execute(String sql) throws SQLException
    {
        return delegate.execute(sql);
    }

    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException
    {
        return delegate.execute(sql, autoGeneratedKeys);
    }

    public boolean execute(String sql, int[] columnIndexes) throws SQLException
    {
        return delegate.execute(sql, columnIndexes);
    }

    public boolean execute(String sql, String[] columnNames) throws SQLException
    {
        return delegate.execute(sql, columnNames);
    }

    public int[] executeBatch() throws SQLException
    {
        return delegate.executeBatch();
    }

    public ResultSet executeQuery(String sql) throws SQLException
    {
        return delegate.executeQuery(sql);
    }

    public int executeUpdate(String sql) throws SQLException
    {
        return delegate.executeUpdate(sql);
    }

    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException
    {
        return delegate.executeUpdate(sql, autoGeneratedKeys);
    }

    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException
    {
        return delegate.executeUpdate(sql, columnIndexes);
    }

    public int executeUpdate(String sql, String[] columnNames) throws SQLException
    {
        return delegate.executeUpdate(sql, columnNames);
    }

    public Connection getConnection() throws SQLException
    {
        return delegate.getConnection();
    }

    public int getFetchDirection() throws SQLException
    {
        return delegate.getFetchDirection();
    }

    public int getFetchSize() throws SQLException
    {
        return delegate.getFetchSize();
    }

    public ResultSet getGeneratedKeys() throws SQLException
    {
        return delegate.getGeneratedKeys();
    }

    public int getMaxFieldSize() throws SQLException
    {
        return delegate.getMaxFieldSize();
    }

    public int getMaxRows() throws SQLException
    {
        return delegate.getMaxRows();
    }

    public boolean getMoreResults() throws SQLException
    {
        return delegate.getMoreResults();
    }

    public boolean getMoreResults(int current) throws SQLException
    {
        return delegate.getMoreResults(current);
    }

    public int getQueryTimeout() throws SQLException
    {
        return delegate.getQueryTimeout();
    }

    public ResultSet getResultSet() throws SQLException
    {
        return delegate.getResultSet();
    }

    public int getResultSetConcurrency() throws SQLException
    {
        return delegate.getResultSetConcurrency();
    }

    public int getResultSetHoldability() throws SQLException
    {
        return delegate.getResultSetHoldability();
    }

    public int getResultSetType() throws SQLException
    {
        return delegate.getResultSetType();
    }

    public int getUpdateCount() throws SQLException
    {
        return delegate.getUpdateCount();
    }

    public SQLWarning getWarnings() throws SQLException
    {
        return delegate.getWarnings();
    }

    public boolean isClosed() throws SQLException
    {
        return delegate.isClosed();
    }

    public boolean isPoolable() throws SQLException
    {
        return delegate.isPoolable();
    }

    public void closeOnCompletion() throws SQLException
    {
        delegate.closeOnCompletion();
    }

    public boolean isCloseOnCompletion() throws SQLException
    {
        return delegate.isCloseOnCompletion();
    }

    public void setCursorName(String name) throws SQLException
    {
        delegate.setCursorName(name);
    }

    public void setEscapeProcessing(boolean enable) throws SQLException
    {
        delegate.setEscapeProcessing(enable);
    }

    public void setFetchDirection(int direction) throws SQLException
    {
        delegate.setFetchDirection(direction);
    }

    public void setFetchSize(int rows) throws SQLException
    {
        delegate.setFetchSize(rows);
    }

    public void setMaxFieldSize(int max) throws SQLException
    {
        delegate.setMaxFieldSize(max);
    }

    public void setMaxRows(int max) throws SQLException
    {
        delegate.setMaxRows(max);
    }

    public void setPoolable(boolean poolable) throws SQLException
    {
        delegate.setPoolable(poolable);
    }

    public void setQueryTimeout(int seconds) throws SQLException
    {
        delegate.setQueryTimeout(seconds);
    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException
    {
        return delegate.isWrapperFor(iface);
    }

    public <T> T unwrap(Class<T> iface) throws SQLException
    {
        return delegate.unwrap(iface);
    }
}
